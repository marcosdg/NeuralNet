package core.data;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.*;

public class DataParser {


	// PROBEN1 data files header.

	private Integer num_bool_inputs,
                     num_bool_outputs,
					 num_real_inputs,
                     num_real_outputs,

                     num_training_samples,
                     num_validation_samples,
                     num_test_samples;

	// To distinguish an input/output datum in a data row.

    private Integer total_inputs,
                     total_outputs;

	private String file_path;

	public DataParser(String file_path) {
		if (file_path == null) {
			throw new IllegalArgumentException("Data file must not be null !");
		} else {
			this.num_bool_inputs = 0;
			this.num_real_inputs = 0;
            this.num_bool_outputs = 0;
            this.num_real_outputs = 0;
            this.num_training_samples = 0;
            this.num_validation_samples = 0;
            this.num_test_samples = 0;
            this.total_inputs = 0;
            this.total_outputs = 0;


			this.file_path = file_path;
		}
	}
	public Benchmark parseData() {
		try {
			BufferedReader reader = new BufferedReader(new FileReader(this.file_path));
			List<Sample> samples = new ArrayList<Sample>();

			String line = reader.readLine();
			while (line != null) {

				// Is header line ?

				if (line.contains("=")) {
					this.setBenchmarkParameter(line);

				// Is data line ?

				} else {
					Sample sample = new Sample();
					String[] data = line.split(" ");
					int at = 0;

					this.calculateTotalInputsOutputs();

					// Process data line.

					for (String datum: data) {

						// Is datum an input ?

						if (at <= this.total_inputs) {
							sample.addInput(this.stringToDouble(datum));

						// Is datum an output ?

						} else {
							sample.addOutput(this.stringToDouble(datum));
						}
					}
					samples.add(sample);
				}

				line = reader.readLine();
			}
			reader.close();
		} catch (FileNotFoundException e) {

			e.printStackTrace();
		} catch (IOException e) {

			e.printStackTrace();
		}

		Benchmark benchmark = new Benchmark(this.training_samples, this.validation_samples, this.test_samples, samples);

		return benchmark;
	}




	public void setBenchmarkParameter(String line) {
		String[] left_right = line.split("=");
		String left = left_right[0];
		Integer right = this.stringToInteger(left_right[1]);

		Integer which = null;

		// Which one to be set?

		if (left.contains("real_in")) {
			which = this.num_real_inputs;

		} else if (left.contains("bool_in")) {
			which = this.num_bool_inputs;

		} else if (left.contains("real_out")) {
			which = this.num_real_outputs;

		} else if (left.contains("bool_out")) {
			which = this.num_bool_outputs;

		} else if (left.contains("training_examples")) {
			which = this.num_training_samples;

		} else if (left.contains("validation_examples")) {
			which = this.num_validation_samples;

		} else if (left.contains("test_examples")) {
			which = this.num_test_samples;
		}
		which = right;
	}

	public void calculateTotalInputsOutputs() {

		// boolean inputs ?

		if (this.num_bool_inputs != 0) {
			this.total_inputs = this.num_bool_inputs;

			// with boolean outputs ?

			if (this.num_bool_outputs != 0) {
				this.total_outputs = this.num_bool_outputs;

			// with real outputs ?

			} else if (this.num_real_outputs != 0) {
				this.total_outputs = this.num_real_outputs;
			}

		// or real inputs ?

		} else if (this.num_real_inputs != 0) {
			this.total_inputs = this.num_real_inputs;

			// with boolean outputs ?

			if (this.num_bool_outputs != 0) {
				this.total_outputs = this.num_bool_outputs;

			// with real outputs ?

			} else if (this.num_real_outputs != 0) {
				this.total_outputs = this.num_real_outputs;
			}
		}
	}

	public Double stringToDouble(String data) {
		return Double.parseDouble(data);
	}
	public Integer stringToInteger(String data) {
		return Integer.valueOf(data);
	}




}
