package core.learning.error;

import java.util.ArrayList;
import java.util.List;

import core.data.Benchmark;
import core.data.Sample;

public class SquaredError {


// Classification problems.


	public static List<Double> roundAll(List<Double> values) {
		List<Double> rounded = new ArrayList<Double>();

		for (Double value: values) {
			rounded.add(Math.rint(value));
		}
		return rounded;
	}
	public static Double getClassificationSquaredError(List<Double> desired_output_vector,
                                                         List<Double> output_vector,
                                                         int num_output_nodes) {

		List<Double> routputs = SquaredError.roundAll(output_vector);
		Double squared_error = 0.0,
	           desired_output,
	           routput;
		int i,
	         N = num_output_nodes;
		if (areAdequate(desired_output_vector, output_vector)) {

			for (i = 0; i < N; i += 1) {
				desired_output = desired_output_vector.get(i);
				routput = routputs.get(i);

				squared_error += Math.pow((desired_output - routput), 2);
			}
		}

		return squared_error;
	}


// Approximation problems.

	// SUM{i,N}: (desired{i} - output{i}) ^ 2

	public static Double getSquaredError(List<Double> desired_output_vector,
                                           List<Double> output_vector,
                                           int num_output_nodes,
                                           boolean classification) {
		List<Double> routputs = SquaredError.roundAll(output_vector);
		Double squared_error = 0.0,
               desired_output,
               output,
               routput;
		int i,
             N = num_output_nodes;

		if (areAdequate(desired_output_vector, output_vector)) {

			for (i = 0; i < N; i += 1) {
				desired_output = desired_output_vector.get(i);
				output = output_vector.get(i);
				routput = routputs.get(i);

				squared_error += (classification) ?
                                   Math.pow((desired_output - routput), 2)
                                  :Math.pow((desired_output - output), 2);
			}
		}
		return squared_error;
	}
	public static boolean areAdequate(List<Double> desired_output_vector,
                                         List<Double> output_vector) {
		boolean are = false;

		// empty ?

		if (desired_output_vector.isEmpty() || output_vector.isEmpty()) {

			throw new IllegalArgumentException("SquaredError: empty vectors.");

		// different sizes ?

		} else if (desired_output_vector.size() != output_vector.size()) {

			throw new IllegalArgumentException("SquaredError: vectors of" +
                                                " different sizes.");
		} else {
			are = true;
		}
		return are;
	}

	// Mean Squared Error.
/*
	public 	Double getMeanSquaredError(List<Double> desired_output_vector,
                                       List<Double> output_vector,
                                       int num_output_nodes) {

		int N = num_output_nodes;
		Double squared_error = getSquaredError(desired_output_vector,
                                               output_vector,
                                               N);
		return (squared_error / N);
	}
*/

// Classification / Aproximation.


	// Normalized Average Squared Error of all the samples.

	public static Double getSquaredErrorPercentage(List<Sample> samples,
                                                     List<List<Double>> output_vectors,
                                                     int num_output_nodes,
                                                     boolean classification) {
		int N = num_output_nodes,
            P = samples.size();

		Double squared_error = 0.0,
		       total_squared_error = 0.0,
               norm_factor = 0.0,
               output_min = Benchmark.getMinDesiredOutputValue(),
               output_max = Benchmark.getMaxDesiredOutputValue();

		List<Double> desired_output_vector = null,
                     output_vector = null;

		norm_factor = 100 * ((output_max - output_min) / (N * P));

		for (int i = 0; i < P; i += 1) {
			desired_output_vector = samples.get(i).getDesiredOutputVector();
			output_vector = output_vectors.get(i);

			squared_error = getSquaredError(desired_output_vector,
                                            output_vector,
                                            N,
                                            classification);
			total_squared_error += squared_error;
		}
		return (norm_factor * total_squared_error);
	}
}